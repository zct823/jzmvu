////  CalenderViewController.m//  myjam////  Created by nazri on 11/29/12.//  Copyright (c) 2012 me-tech. All rights reserved.//#import <QuartzCore/QuartzCore.h>#import <Twitter/Twitter.h>#import "CalenderViewController.h"#import "Barcode.h"#import "TPKeyboardAvoidingScrollView.h"#import "ASIWrapper.h"#import "CustomAlertView.h"#define kFrameHeightOnKeyboardUp 664.0f#define kFrameHeightOnKeyboardDown 983.0f#define kStartTitleY 638.0f@interface CalenderViewController ()@end@implementation CalenderViewController- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil{    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];    if (self) {        // Custom initialization                //TITLE        self.title = @"Create";        FontLabel *titleView = [[FontLabel alloc] initWithFrame:CGRectZero fontName:@"jambu-font.otf" pointSize:22];        titleView.text = self.title;        titleView.textAlignment = NSTextAlignmentCenter;        titleView.backgroundColor = [UIColor clearColor];        titleView.textColor = [UIColor whiteColor];        [titleView sizeToFit];        self.navigationItem.titleView = titleView;        [titleView release];                // Init scrollview        self.scroller = (TPKeyboardAvoidingScrollView *)self.view;        [self.scroller setContentSize:CGSizeMake(self.contentView.frame.size.width, kFrameHeightOnKeyboardUp+44)];        [self.scroller addSubview:self.contentView];                self.eventDescTextView.layer.borderWidth = 1.0f;        self.eventDescTextView.layer.borderColor = [[UIColor grayColor] CGColor];        self.eventDescTextView.layer.cornerRadius = 8.0f;                //==== TO SET TODAY DATE N TIME ====//                NSDateFormatter *getDateFormat = [[NSDateFormatter alloc] init];        NSDate *getNonFDate = [[NSDate date] init];                [getDateFormat setDateFormat:@"dd/MM/yyyy"];        NSString *getCurrentDate = [getDateFormat stringFromDate:getNonFDate];        NSLog(@"Current Date: %@",getCurrentDate);        self.startDateTextField.text = getCurrentDate;        self.endDateTextField.text = getCurrentDate;                [getDateFormat setDateFormat:@"hh:mm a"];        NSString *getCurrentTime = [getDateFormat stringFromDate:getNonFDate];        NSLog(@"Current Time: %@",getCurrentTime);        self.startTimeTextField.text = getCurrentTime;        self.endTimeTextField.text = getCurrentTime;        [getDateFormat release];        //==== END OF SET DATE AND TIME ====//            }    return self;}- (void)viewDidLoad{    [super viewDidLoad];        self.categories = [[NSMutableDictionary alloc] init];    self.dataArray = [[NSMutableArray alloc] init];        // setup descLabel / fulltext inside UIView    self.titleLabel = [[UILabel alloc] init];    self.descLabel = [[UILabel alloc] init];        //setup titleView    self.titleView = [[UIView alloc] init];    //setup descView    self.descView = [[UIView alloc] init];        // Setup pickerview    self.pickerView = [[UIPickerView alloc] init];    //    // Set pickerview delegate    self.pickerView.delegate = self;    self.pickerView.dataSource = self;    //    //    // Set the picker's frame. We set the y coordinate to 50px.    //    [self.pickerView setFrame: CGRectMake(xPoint, 50.0f, pickerWidth, 180.0f)];    self.pickerView.showsSelectionIndicator = YES;        // Toolbar for pickerView    UIToolbar *pickerToolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, 320, 44)];    pickerToolbar.barStyle = UIBarStyleBlack;        UIBarButtonItem *aDoneButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(aPickerDoneClicked:)];        UIBarButtonItem *aSpacer = [[[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil] autorelease];        //UIBarButtonItem *aCancelButton = [[UIBarButtonItem alloc] initWithTitle:@"Clear" style:UIBarButtonItemStyleBordered target:self action:@selector(aPickerCancelClicked)];        [pickerToolbar setItems:[NSArray arrayWithObjects:aSpacer, aDoneButton, nil]];    self.categoryTextField.inputAccessoryView = pickerToolbar;    [self.view addSubview:self.pickerView];        self.categoryTextField.inputView = self.pickerView;        // textfield delegate    self.appTitleTextField.delegate = self;    self.eventNameTextField.delegate = self;    self.eventDescTextView.delegate = self;    self.startDateTextField.delegate = self;    self.endDateTextField.delegate = self;    self.startTimeTextField.delegate = self;    self.endTimeTextField.delegate = self;    self.locationTextField.delegate = self;        [self.previewButton addTarget:self action:@selector(checkMandatoryFieldFirst) forControlEvents:UIControlEventTouchUpInside];        [self.saveButton addTarget:self action:@selector(saveCreatedQR) forControlEvents:UIControlEventTouchUpInside];        self.datePicker = [[UIDatePicker alloc]init];    [self.datePicker addTarget:self action:@selector(dateChanged:) forControlEvents:UIControlEventValueChanged];        UIToolbar *toolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, 320, 44)];    toolbar.barStyle = UIBarStyleBlack;        UIBarButtonItem *doneButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(pickerDoneClicked:)];        UIBarButtonItem *spacer = [[[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil] autorelease];        //UIBarButtonItem *cancelButton = [[UIBarButtonItem alloc] initWithTitle:@"Clear" style:UIBarButtonItemStyleBordered target:self action:@selector(pickerCancelClicked)];        [toolbar setItems:[NSArray arrayWithObjects: spacer, doneButton, nil]];        self.dateToolbar = toolbar;        self.startDateTextField.inputView = self.datePicker;    self.startTimeTextField.inputView = self.datePicker;    self.endDateTextField.inputView = self.datePicker;    self.endTimeTextField.inputView = self.datePicker;        self.startDateTextField.inputAccessoryView = self.dateToolbar;    self.startTimeTextField.inputAccessoryView = self.dateToolbar;    self.endDateTextField.inputAccessoryView = self.dateToolbar;    self.endTimeTextField.inputAccessoryView = self.dateToolbar;        self.contentView.frame = CGRectMake(0, 0.0f, self.contentView.frame.size.width, kFrameHeightOnKeyboardUp+44);    [self.shareView setHidden:YES];        // Setup share button in shareVIew    [self.shareFBButton addTarget:self action:@selector(shareImageOnFB) forControlEvents:UIControlEventTouchUpInside];    [self.shareTwitterButton addTarget:self action:@selector(shareImageOnTwitter) forControlEvents:UIControlEventTouchUpInside];    [self.shareEmailButton addTarget:self action:@selector(shareImageOnEmail) forControlEvents:UIControlEventTouchUpInside];}- (void)viewWillAppear:(BOOL)animated{    if (![self.dataArray count]) {        //        [self performSelector:@selector(setupCategoryList) withObject:nil];        [self setupCategoryList];    }}- (void)setupCategoryList{    // Init the category data    [self getCategoriesFromAPI];        // Set list for pickerView    [self.dataArray addObjectsFromArray:[self.categories allKeys]];    [self.dataArray sortUsingSelector:@selector(localizedCaseInsensitiveCompare:)];}#pragma mark -#pragma mark share action handler- (void)addShareItemtoServer:(NSString *)aQRcodeId withShareType:(NSString *)aType{    NSString *urlString = [NSString stringWithFormat:@"%@/api/qrcode_share.php?token=%@",APP_API_URL,[[[NSUserDefaults standardUserDefaults] objectForKey:@"tokenString"]mutableCopy]];        NSString *dataContent = [NSString stringWithFormat:@"{\"qrcode_id\":%@,\"share_type\":\"%@\"}",aQRcodeId,aType];        NSString *response = [ASIWrapper requestPostJSONWithStringURL:urlString andDataContent:dataContent];    NSLog(@"abc: %@, def:%@",dataContent, response);    NSDictionary *resultsDictionary = [[response objectFromJSONString] mutableCopy];        if([resultsDictionary count])    {        NSString *status = [resultsDictionary objectForKey:@"status"];                if ([status isEqualToString:@"ok"])        {            NSLog(@"Success share");        }        else{            NSLog(@"share error!");        }    }    }- (void)shareImageOnEmail{        if ([MFMailComposeViewController canSendMail])    {        MFMailComposeViewController *mailer = [[MFMailComposeViewController alloc] init];        mailer.mailComposeDelegate = self;        [mailer setSubject:@"JAM-BU App"];        UIImage *myImage = self.imagePreview.image;        NSData *imageData = UIImagePNGRepresentation(myImage);        [mailer addAttachmentData:imageData mimeType:@"image/png" fileName:qrcodeId];        NSString *emailBody = [NSString stringWithFormat:@"JAM-BU App: %@/?qrcode_id=%@",APP_API_URL,qrcodeId];        [mailer setMessageBody:emailBody isHTML:NO];        [self presentModalViewController:mailer animated:YES];        [mailer release];    }    else    {        CustomAlertView *alert = [[CustomAlertView alloc] initWithTitle:@"Save" message:@"Please configure your mail in Mail Application" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];        [alert show];        [alert release];    }        [self addShareItemtoServer:qrcodeId withShareType:@"email"];}- (void)shareImageOnTwitter{    //CHECK VERSION FIRST. Constant can refer from Constant.h    if(SYSTEM_VERSION_EQUAL_TO(@"5.0") || SYSTEM_VERSION_EQUAL_TO(@"5.1"))    {        [self twitterAPIShare];    }    else if(SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"6.0"))    {        [self callAPIShare:kOPTION_TWITTER];    }}- (void)shareImageOnFB{    //check version first and then call method    if(SYSTEM_VERSION_EQUAL_TO(@"5.0") || SYSTEM_VERSION_EQUAL_TO(@"5.1"))    {        CustomAlertView *alert = [[CustomAlertView alloc] initWithTitle:@"Unsupported iOS Version" message:@"Sorry. Your iOS version doesn't support Facebook Share." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];        [alert show];        [alert release];            }    else if(SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"6.0"))    {        [self callAPIShare:kOPTION_FB];    }}- (void)twitterAPIShare //for iOS 5 and 5.1{    TWTweetComposeViewController *twitter = [[TWTweetComposeViewController alloc] init];        [twitter setInitialText:@""];    [twitter addImage:self.imagePreview.image];        [self presentViewController:twitter animated:YES completion:nil];        twitter.completionHandler = ^(TWTweetComposeViewControllerResult res) {                if(res == TWTweetComposeViewControllerResultDone) {                        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Success" message:@"Successfully posted." delegate:self cancelButtonTitle:@"Dismiss" otherButtonTitles: nil];                        [alert show];            [alert release];                                            }        if(res == TWTweetComposeViewControllerResultCancelled) {            /*             UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"Cancelled" message:@"You Cancelled posting the Tweet." delegate:self cancelButtonTitle:@"Dismiss" otherButtonTitles: nil];                          [alert show];             */        }        [self dismissModalViewControllerAnimated:YES];            };    [self addShareItemtoServer:qrcodeId withShareType:[@"Twitter" lowercaseString]];}- (void)callAPIShare:(int)option{    NSString *serviceType = nil;    NSString *type = nil;    if (option == kOPTION_FB) {        serviceType = SLServiceTypeFacebook;        type = @"Facebook";    }else if (option == kOPTION_TWITTER){        serviceType = SLServiceTypeTwitter;        type = @"Twitter";    }        mySLComposerSheet = [[SLComposeViewController alloc] init];    mySLComposerSheet = [SLComposeViewController composeViewControllerForServiceType:serviceType];        if([SLComposeViewController isAvailableForServiceType:serviceType]) //check if account is linked    {                [mySLComposerSheet addImage:self.imagePreview.image];        [self presentViewController:mySLComposerSheet animated:YES completion:nil];                [mySLComposerSheet setCompletionHandler:^(SLComposeViewControllerResult result) {            NSString *output;            switch (result) {                case SLComposeViewControllerResultCancelled:                    output = @"Action Cancelled";                    [self dismissModalViewControllerAnimated:YES];                    break;                case SLComposeViewControllerResultDone:                    output = @"Post Successful";                    CustomAlertView *alert = [[CustomAlertView alloc] initWithTitle:@"Save" message:output delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];                    [alert show];                    [alert release];                                        [self dismissModalViewControllerAnimated:YES];                    break;            }                    }];                            }else{        CustomAlertView *alert = [[CustomAlertView alloc] initWithTitle:@"Save" message:[NSString stringWithFormat:@"Please add your %@ account in Settings",type] delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];        [alert show];        [alert release];    }        [self addShareItemtoServer:qrcodeId withShareType:[type lowercaseString]];}#pragma mark -#pragma mark alertViewDelegate-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{    if (alertView.tag == kAlertNoConnection) {        [self.navigationController popToRootViewControllerAnimated:YES];    }else{        if (buttonIndex == 1) {            [DejalBezelActivityView activityViewForView:self.view withLabel:@"Loading ..." width:100];            NSLog(@"saved");            [self performSelector:@selector(processCreateCalenderQR) withObject:nil afterDelay:0.0];            //            [self processCreateCalenderQR];        }    }    }- (void)saveCreatedQR{    [self.view endEditing:YES];        // If OK, go to alertview delegate    CustomAlertView *alert = [[CustomAlertView alloc] initWithTitle:@"Save" message:@"You cannot make any changes once it is saved. Press OK to continue." delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"OK",nil];    alert.tag = kAlertSave;    [alert show];    [alert release];}- (NSString *)timeToString:(NSDate *)time{    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];    [dateFormatter setDateFormat:@"HH:mm:ss"];    NSString *newTime = [dateFormatter stringFromDate:time];    [dateFormatter release];        return newTime;}- (NSString *)dateToString:(NSDate *)date{    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];    [dateFormatter setDateFormat:@"yyyy-MM-dd"];    NSString *newDate = [dateFormatter stringFromDate:date];    [dateFormatter release];        return newDate;}- (NSString *)formattedDate:(NSString *)date{    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];        NSString *rDate = @"";        [dateFormatter setDateFormat:@"d/MM/yyyy"];        NSDate *newDate = [dateFormatter dateFromString:date];    [dateFormatter release];    NSLog(@"NDate :%@",newDate);    NSDateFormatter *stringFormatter = [[NSDateFormatter alloc] init];        [stringFormatter setDateFormat:@"d MMM yyyy"];        rDate = [stringFormatter stringFromDate:newDate];    [stringFormatter release];    NSLog(@"RDate :%@",rDate);    return rDate;}- (NSString *)formattedDate:(NSString *)date andOption:(int)option{    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];        NSString *rDate = @"";        if (option == kTime) {        [dateFormatter setDateFormat:@"hh:mm a"];    }else{        [dateFormatter setDateFormat:@"d/MM/yyyy"];    }        NSDate *newDate = [dateFormatter dateFromString:date];    [dateFormatter release];        if (option == kTime) {        rDate = [self timeToString:newDate];    }else{        rDate = [self dateToString:newDate];    }    return rDate;}- (void)processCreateCalenderQR{    NSLog(@"process create");        NSString *urlString = [NSString stringWithFormat:@"%@/api/qrcode_calendar.php?token=%@",APP_API_URL,[[[NSUserDefaults standardUserDefaults] objectForKey:@"tokenString"]mutableCopy]];        NSString *startTime = [self formattedDate:self.startTimeTextField.text andOption:kTime];    NSString *startDate = [self formattedDate:self.startDateTextField.text andOption:kDate];    NSString *endTime = [self formattedDate:self.endTimeTextField.text andOption:kTime];    NSString *endDate = [self formattedDate:self.endDateTextField.text andOption:kDate];        NSString *dataContent = [NSString stringWithFormat:@"{\"app_title\":\"%@\",\"category_id\":\"%@\",\"calendar_event_name\":\"%@\",\"calendar_event_description\":\"%@\",\"calendar_start_date\":\"%@\",\"calendar_start_time\":\"%@\",\"calendar_end_date\":\"%@\",\"calendar_end_time\":\"%@\",\"calendar_location\":\"%@\"}",                             self.appTitleTextField.text,                             self.categoryId,                             self.eventNameTextField.text,                             self.eventDescTextView.text,                             startDate,                             startTime,                             endDate,                             endTime,                             self.locationTextField.text];        NSString *response = [ASIWrapper requestPostJSONWithStringURL:urlString andDataContent:dataContent];    NSLog(@"abc: %@, def:%@",dataContent, response);    NSDictionary *resultsDictionary = [[response objectFromJSONString] mutableCopy];    NSLog(@"lepas API");    if([resultsDictionary count])    {        NSString *status = [resultsDictionary objectForKey:@"status"];        NSString *msg = [resultsDictionary objectForKey:@"message"];                NSLog(@"in result");        if ([status isEqualToString:@"ok"])        {            qrcodeId = [resultsDictionary objectForKey:@"qrcode_id"];            NSLog(@"Success submit calender");            Barcode *barcode = [[Barcode alloc] init];            [barcode setupQRCode:[NSString stringWithFormat:@"http://%@/scan/%@",SCAN_URL,qrcodeId]];            self.imagePreview.image = barcode.qRBarcode;            [barcode release];            NSLog(@"result OK");            [self.previewButton setEnabled:NO];            [self.saveButton setEnabled:NO];            [self.shareView setHidden:NO];        }        else if([msg isEqualToString:@"Request timed out."])        {            CustomAlertView *alert = [[CustomAlertView alloc] initWithTitle:@"Request Timed Out" message:@"Please check on the JAM-BU create box" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];            [alert show];            [alert release];        }        else{            NSLog(@"Submit calender failed!");                        CustomAlertView *alert = [[CustomAlertView alloc] initWithTitle:@"JAM-BU Create" message:[resultsDictionary objectForKey:@"message"] delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];            [alert show];            [alert release];                        //            if ([[resultsDictionary objectForKey:@"message"] isEqualToString:@"Request timed out."]) {            //                CustomAlertView *alert = [[CustomAlertView alloc] initWithTitle:@"JAM-BU Create" message:@"Request timed out. Please retry again later" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];            //                [alert show];            //                [alert release];            //            }        }    }            NSLog(@"end save");    [DejalBezelActivityView removeViewAnimated:YES];}#pragma mark -#pragma mark textField delegate- (void)textFieldDidBeginEditing:(UITextField *)textField{        [self.scroller setContentSize:CGSizeMake(self.contentView.frame.size.width, kFrameHeightOnKeyboardUp)];        [self.scroller adjustOffsetToIdealIfNeeded];        self.currTag = textField.tag;        if (textField.tag > 1 && textField.tag < 6) {                if (textField.tag >= 4) {            self.datePicker.datePickerMode = UIDatePickerModeTime;        }else{            self.datePicker.datePickerMode = UIDatePickerModeDate;        }            }}- (void)textFieldDidEndEditing:(UITextField *)textField{    [self.scroller setContentSize:CGSizeMake(self.contentView.frame.size.width, kFrameHeightOnKeyboardUp+44)];    if (textField.tag > 0) {        // auto scroll to bottom        CGPoint bottomOffset = CGPointMake(0, self.scroller.contentSize.height - self.scroller.bounds.size.height);        [self.scroller setContentOffset:bottomOffset animated:YES];    }}- (BOOL)textFieldShouldReturn:(UITextField *)textField{    [textField resignFirstResponder];    return YES;}#pragma mark -#pragma mark PickerView action button- (void)getCategoriesFromAPI{    NSString *urlString = [NSString stringWithFormat:@"%@/api/qrcode_category.php?token=%@",APP_API_URL,[[[NSUserDefaults standardUserDefaults] objectForKey:@"tokenString"]mutableCopy]];    NSString *dataContent = [NSString stringWithFormat:@"{\"src\":\"\"}"];    NSDictionary *cat;    NSString *response = [ASIWrapper requestPostJSONWithStringURL:urlString andDataContent:dataContent];    NSDictionary *resultsDictionary = [[response objectFromJSONString] mutableCopy];        NSLog(@"resp: %@",response);    if([resultsDictionary count])    {        NSString *status = [resultsDictionary objectForKey:@"status"];                if ([status isEqualToString:@"ok"])        {            cat = [resultsDictionary objectForKey:@"list"];                        for (id row in cat)            {                [self.categories setObject:[row objectForKey:@"category_id"] forKey:[row objectForKey:@"category_name"]];            }        }else{            CustomAlertView *alert = [[CustomAlertView alloc] initWithTitle:@"Create Failed" message:@"Connection failure. Please try again later" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];            alert.tag = kAlertNoConnection;            [alert show];            [alert release];        }            }}- (IBAction)aPickerDoneClicked:(id)sender{    //    UITextField *catBox = (UITextField *)[self.view viewWithTag:10];    if (![self.categoryTextField.text length]) {        self.categoryTextField.text = [self.dataArray objectAtIndex:0];    }        self.categoryId = [self.categories objectForKey:self.categoryTextField.text];        [self.categoryTextField resignFirstResponder];}- (IBAction)aPickerCancelClicked{    self.categoryTextField.text = nil;    [self.categoryTextField resignFirstResponder];}#pragma mark -#pragma mark MFMail delegate- (void)mailComposeController:(MFMailComposeViewController*)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError*)error{    NSString *msg;    switch (result)    {        case MFMailComposeResultCancelled:            NSLog(@"Mail cancelled: you cancelled the operation and no email message was queued.");            msg = @"";            break;        case MFMailComposeResultSaved:            NSLog(@"Mail saved: you saved the email message in the drafts folder.");            msg = [NSString stringWithFormat:@"Email has been saved to draft"];            break;        case MFMailComposeResultSent:            NSLog(@"Mail send: the email message is queued in the outbox. It is ready to send.");            msg = [NSString stringWithFormat:@"Email has been successfully sent"];            break;        case MFMailComposeResultFailed:            NSLog(@"Mail failed: the email message was not saved or queued, possibly due to an error.");            msg = [NSString stringWithFormat:@"Email was not sent, possibly due to an error"];            break;        default:            NSLog(@"Mail not sent.");            break;    }        if (![msg isEqualToString:@""]) {        CustomAlertView *alert = [[CustomAlertView alloc] initWithTitle:@"Save" message:msg delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];        [alert show];        [alert release];    }            // Remove the mail view    [self dismissModalViewControllerAnimated:YES];}#pragma mark -#pragma mark UIPickerView Delegate// Number of components.-(NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView{    return 1;}// Total rows in our component.-(NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component{    return [self.dataArray count];}// Display each row's data.-(NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component{    return [self.dataArray objectAtIndex: row];}// Do something with the selected row.-(void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component{        self.categoryTextField.text = [self.dataArray objectAtIndex:row];}//- (NSString *)comparedDate:(NSString *)date//{//    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];////    NSString *rDate = @"";////    [dateFormatter setDateFormat:@"d/MM/yyyy"];////    NSDate *newDate = [dateFormatter dateFromString:date];//    [dateFormatter release];//    NSDateFormatter *stringFormatter = [[NSDateFormatter alloc] init];////    [stringFormatter setDateFormat:@"d/MMM/yyyy"];////    rDate = [stringFormatter stringFromDate:newDate];//    [stringFormatter release];//    return rDate;//}#pragma mark -#pragma mark datePicker action- (IBAction)pickerDoneClicked:(id)sender{    UITextField *currTextField = (UITextField *)[self.view viewWithTag:self.currTag];    [currTextField resignFirstResponder];}- (void)dateChangedProcess:(id)sender{    NSLog(@"currTag: %d",self.currTag);        UITextField *currTextField = (UITextField *)[self.view viewWithTag:self.currTag];    NSDate *newDate = [[NSDate alloc] init];        if (self.selectedDate != nil) {        newDate = self.selectedDate;    }        NSDateFormatter *format = [[NSDateFormatter alloc] init];        if (self.currTag >= 4) {        [format setDateFormat:@"hh:mm a"];    }else{        [format setDateFormat:@"d/MM/yyyy"];    }    currTextField.text = [format stringFromDate:newDate];    //set date & time for comparing    NSDateFormatter *dFormat = [[[NSDateFormatter alloc] init] autorelease];    NSDateFormatter *tFormat = [[[NSDateFormatter alloc] init] autorelease];    [dFormat setDateFormat:@"d/MM/yyyy"];    [tFormat setDateFormat:@"hh:mm a"];    //declare date & time for comparing    NSDate *sDate = [dFormat dateFromString:self.startDateTextField.text];    NSDate *eDate = [dFormat dateFromString:self.endDateTextField.text];    NSDate *sTime = [tFormat dateFromString:self.startTimeTextField.text];    NSDate *eTime = [tFormat dateFromString:self.endTimeTextField.text];        if ([sDate compare:eDate]==NSOrderedDescending) {        self.endDateTextField.text = [format stringFromDate:newDate];    }    if ([eDate compare:sDate]==NSOrderedAscending) {        self.startDateTextField.text = [format stringFromDate:newDate];    }    //declare new date from textfield after setted above    NSDate *sNewDate = [dFormat dateFromString:self.startDateTextField.text];    NSDate *eNewDate = [dFormat dateFromString:self.endDateTextField.text];        if (sDate != NULL && eDate != NULL)    {        if ([sNewDate compare:eNewDate]==NSOrderedSame && [sTime compare:eTime]==NSOrderedDescending)        {            self.endTimeTextField.text = [tFormat stringFromDate:sTime];        }else if ([sNewDate compare:eNewDate]==NSOrderedSame && [eTime compare:sTime]==NSOrderedAscending)        {            self.startTimeTextField.text = [tFormat stringFromDate:eTime];        }    }    NSLog(@"currTextField: %@",currTextField.text);    [format release];}- (void)dateChanged:(UIDatePicker *)datePicker{    self.selectedDate = datePicker.date;    [self dateChangedProcess:self];}- (IBAction)pickerCancelClicked{    NSLog(@"currTag: %d",self.currTag);        UITextField *currTextField = (UITextField *)[self.view viewWithTag:self.currTag];    currTextField.text = @"";    [currTextField resignFirstResponder];    }#pragma mark -#pragma mark textView delegate- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text{    self.eventDescTextView.contentInset = UIEdgeInsetsZero;    // Any new character added is passed in as the "text" parameter    if ([text isEqualToString:@"\n"]) {        // Be sure to test for equality using the "isEqualToString" message        [textView resignFirstResponder];                // Return FALSE so that the final '\n' character doesn't get added        return FALSE;    }    // For any other character return TRUE so that the text gets added to the view    return TRUE;}- (void)didReceiveMemoryWarning{    [super didReceiveMemoryWarning];    // Dispose of any resources that can be recreated.}#pragma mark -#pragma mark button action- (void)checkMandatoryFieldFirst{    if ([self.appTitleTextField.text length] == 0)    {        reqFieldName = @"JAM-BU App Title";        [self triggerRequiredAlert];    }    else if ([self.categoryTextField.text length] == 0)    {        reqFieldName = @"Category";        [self triggerRequiredAlert];    }    else if ([self.eventNameTextField.text length] == 0)    {        reqFieldName = @"Event Name";        [self triggerRequiredAlert];    }    else if ([self.eventDescTextView.text length] == 0)    {        reqFieldName = @"Event Description";        [self triggerRequiredAlert];    }    else    {        [self updatePreview];    }}- (void)triggerRequiredAlert{    NSString *reqMsg = [NSString stringWithFormat:@"%@ is required.",reqFieldName];        CustomAlertView *alert = [[CustomAlertView alloc] initWithTitle:@"JAM-BU Register" message:reqMsg delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];    [alert show];    [alert release];}- (void)updatePreview{    [self.view endEditing:YES];        //    if ([self.appTitleTextField.text length] == 0 || [self.nameTextField.text length] == 0 || [self.mobileTextField.text length] == 0) {    //        return;    //    }        for (UIView *aView in [self.view subviews]) {        if (aView == self.titleView || aView == self.descView || aView == self.titleLabel || aView == self.descLabel) {            [aView removeFromSuperview];        }    }        NSLog(@"update Preview");    NSString *appTitle = [NSString stringWithFormat:@"%@",self.appTitleTextField.text];        // setup descLabel / fulltext inside UIView    self.titleLabel.frame = CGRectMake(0, 0, 200, 30);    self.descLabel.frame = CGRectMake(0, 0, 200, 50);        self.titleLabel.text = [NSString stringWithFormat:@"%@",appTitle];        NSMutableString *aStart = [[NSMutableString alloc] init];    if ([self.startTimeTextField.text length] > 1) {        [aStart appendFormat:@"From:\n%@\n",self.startTimeTextField.text];    }    if ([self.startDateTextField.text length] > 1) {        [aStart appendFormat:@"%@\n",[self formattedDate:self.startDateTextField.text]];    }            NSMutableString *aEnd = [[NSMutableString alloc] init];    if ([self.endTimeTextField.text length] > 1) {        [aEnd appendFormat:@"\nTo:\n%@\n",self.endTimeTextField.text];    }    if ([self.endDateTextField.text length] > 1) {        [aEnd appendFormat:@"%@",[self formattedDate:self.endDateTextField.text]];    }    if ([self.locationTextField.text length] > 0) {        [aEnd appendFormat:@"\n\nLocation: %@",self.locationTextField.text];    }    if ([self.eventDescTextView.text length] > 0) {        [aEnd appendFormat:@"\n\nDescription: %@",self.eventDescTextView.text];    }        self.descLabel.text = [NSString stringWithFormat:@"%@%@", aStart, aEnd];    [aStart release];    [aEnd release];        //setup titleLabel    [self.titleLabel setFont:[UIFont systemFontOfSize:17]];    [self.titleLabel setBackgroundColor:[UIColor clearColor]];    [self.titleLabel setNumberOfLines:0];    [self.titleLabel sizeToFit];    //setup descLabel    [self.descLabel setBackgroundColor:[UIColor clearColor]];    [self.descLabel setFont:[UIFont systemFontOfSize:12]];    [self.descLabel setNumberOfLines:0];    [self.descLabel sizeToFit];        //setup titleView    self.titleView.frame = CGRectMake(106, kStartTitleY, self.titleLabel.frame.size.width, self.titleLabel.frame.size.height);    //setup descView    self.descView.frame = CGRectMake(106, kStartTitleY+self.titleView.frame.size.height, self.descLabel.frame.size.width, self.descLabel.frame.size.height+30);        [self.titleView addSubview:self.titleLabel];    [self.descView addSubview:self.descLabel];    [self.view addSubview:self.titleView];    [self.view addSubview:self.descView];        //setup saveButton    CGFloat saveViewYPoint = kStartTitleY + self.titleView.frame.size.height + self.descView.frame.size.height;    self.saveButton.frame = CGRectMake(0, saveViewYPoint, self.saveButton.frame.size.width, self.saveButton.frame.size.height);    [self.view addSubview:self.saveButton];        // Setup shareView at bottom    CGFloat shareViewYPoint = saveViewYPoint + self.saveButton.frame.size.height;    self.shareView.frame = CGRectMake(0, shareViewYPoint, self.shareView.frame.size.width, self.shareView.frame.size.height);    [self.view addSubview:self.shareView];        //    NSString *qrcodeId = [self processCreateContactQR];    //    Barcode *barcode = [[Barcode alloc] init];    //    [barcode setupQRCode:[NSString stringWithFormat:@"%@/preview/",APP_API_URL]];    //    self.imagePreview.image = barcode.qRBarcode;    //    [barcode release];        self.imagePreview.image = [UIImage imageNamed:@"preview"];        [self.previewButton setTitle:@"Update Preview" forState:UIControlStateNormal];        // show the bottom view for the result    self.contentView.frame = CGRectMake(0, 0.0f, self.contentView.frame.size.width, kFrameHeightOnKeyboardDown+64);    [self.scroller setContentSize:CGSizeMake(self.contentView.frame.size.width, kFrameHeightOnKeyboardDown+64)];        // auto scroll to bottom    CGPoint bottomOffset = CGPointMake(0, self.scroller.contentSize.height - self.scroller.bounds.size.height);    [self.scroller setContentOffset:bottomOffset animated:YES];}- (void)dealloc {    [_startTimeTextField release];    [_appTitleTextField release];    [_eventNameTextField release];    [_eventDescTextView release];    [_startDateTextField release];    [_endDateTextField release];    [_endTimeTextField release];    [_locationTextField release];    [_previewButton release];    [_imagePreview release];    //    [_qrTypeLabel release];    //    [_qrDescLabel release];    [_saveButton release];    //    [_startTimeTextView release];    //    [_endTimeTextView release];    [_fromLabel release];    //    [_toLabel release];    //    [_fromLabel release];    [_categoryTextField release];    [_shareView release];    [super dealloc];}- (void)viewDidUnload {    [self setStartTimeTextField:nil];    [self setAppTitleTextField:nil];    [self setEventNameTextField:nil];    [self setEventDescTextView:nil];    [self setStartDateTextField:nil];    [self setEndDateTextField:nil];    [self setEndTimeTextField:nil];    [self setLocationTextField:nil];    [self setImagePreview:nil];    //    [self setQrImageView:nil];    //    [self setQrTypeLabel:nil];    //    [self setQrDescLabel:nil];    [self setSaveButton:nil];    //    [self setStartTimeTextView:nil];    //    [self setEndTimeTextView:nil];    [self setFromLabel:nil];    [self setToLabel:nil];    [self setFromLabel:nil];    [self setCategoryTextField:nil];    [self setShareView:nil];    [super viewDidUnload];}@end